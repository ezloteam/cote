{"version":3,"sources":["../../../../src/components/node-discover/lib/mqtt.js"],"names":["EventEmitter","require","util","dns","mqtthost","MqttHandler","mqttopts","network","call","defopts","host","host_port","host_protocol","host_resolve_interval","host_resolve_interval_after_error","host_resolve_initial_delay","host_topic_prefix","lastSend","opts","port","i","that","discoverHostsTimer","setTimeout","discoverHosts","hosts","inherits","prototype","clearTimeout","resolve","err","records","length","console","error","close","log","createHost","on","id","message","mqtthostid","emit","key","Buffer","from","toString","send","ip","indexOf","bind","address","callback","setBroadcast","addMembership","setMulticastTTL","msg","offset","setImmediate","index","createSocket","module","exports"],"mappings":"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","sourcesContent":["const EventEmitter = require('events').EventEmitter;\nconst util = require('util');\nconst dns = require('dns');\nconst mqtthost = require('./mqtthost');\n\nfunction MqttHandler(mqttopts, network) {\n    EventEmitter.call(this);\n\n    const defopts = {\n        host: 'mqtt',\n        host_port: '1883',\n        host_protocol: 'mqtt',\n        host_resolve_interval: 30 * 1000,\n        host_resolve_interval_after_error: 30 * 1000,\n        host_resolve_initial_delay: 100,\n        host_topic_prefix: 'node-discover/',\n    };\n\n    this.lastSend = '';\n    this.opts = mqttopts || {};\n    this.network = network || {};\n    this.port = 0;\n    /* this.opts.return_buffers = true;*/\n\n    let i;\n    for (i in defopts) {\n        if (typeof this.opts[i] == 'undefined') {\n            this.opts[i] = defopts[i];\n        }\n    }\n\n    const that = this;\n    this.discoverHostsTimer = setTimeout(function() {\n        that.discoverHosts();\n    }, this.opts.host_resolve_initial_delay);\n\n    // console.log('Starting mqtt with ',this.opts,'and',this.network.getInstanceUuid(), '/', this.network.getProcessUuid() );\n\n    this.hosts = {};\n}\nutil.inherits(MqttHandler, EventEmitter);\n\n// MqttHandler.setMaxListeners(20);\n\nMqttHandler.prototype.discoverHosts = function() {\n    const that = this;\n    clearTimeout(that.discoverHostsTimer);\n    /* console.log('Resolving host',this.opts.host); */\n    dns.resolve(this.opts.host, 'A', function(err, records) {\n        if (err) {\n            var i; /* console.error('Error',err);*/\n            /* ?? */\n            // setTimeout(function(){ that.discoverHosts() },that.opts.host_resolve_interval_after_error );\n        }\n        if (typeof records === 'undefined' || records.length == 0) {\n            console.error('Critical', 'no ips found for', that.opts.host);\n            for (i in that.hosts) {\n                that.hosts[i].close();\n                delete that.hosts[i];\n                console.log('forgetting @', i);\n            }\n            setTimeout(function() {\n                that.discoverHosts();\n            }, that.opts.host_resolve_interval_after_error);\n            return;\n        }\n\n        for (i in records) {\n            if (typeof that.hosts[records[i]] == 'undefined') {\n                // console.log('adding @',records[i]);\n                that.hosts[records[i]] = mqtthost.createHost(records[i], that);\n                that.hosts[records[i]].on('message', function(id, message, mqtthostid) {\n                    // console.log('*** [',message,']',message.length);\n                    if (message.length === 0) {\n                        // console.log('!!!!!!!!!!!!!!!!!!!!!!!!!');\n                        that.emit('message', id, '', { port: that.port }, mqtthostid);\n                    } else {\n                        if (that.network.key !== null) {\n                            that.emit('message', id, Buffer.from(message, 'base64').toString(), { port: that.port }, mqtthostid);\n                        } else {\n                            that.emit('message', id, message.toString(), { port: that.port }, mqtthostid);\n                        }\n                    }\n                });\n                that.hosts[records[i]].on('mqtthostdisconnected', function(mqtthostid) {\n                    // console.log('--disconnected mqtt',mqtthostid);\n                    that.emit('mqtthostdisconnected', mqtthostid);\n                });\n                that.hosts[records[i]].send(that.lastSend);\n            }\n        }\n        for (i in that.hosts) {\n            console.log('Exists host', that.hosts[i].ip, 'in', records, '?');\n            if (records.indexOf(that.hosts[i].ip) === -1) {\n                const ip = that.hosts[i].ip;\n                that.hosts[i].close();\n                delete that.hosts[i];\n                console.log('forgetting @', i);\n                that.emit('mqtthostdisconnected', ip);\n            }\n        }\n        setTimeout(function() {\n            that.discoverHosts();\n        }, that.opts.host_resolve_interval);\n    });\n};\n\nMqttHandler.prototype.bind = function(port, address, callback) {\n    const that = this;\n    that.port = port;\n    /* this.sub = redis.createClient(this.opts);\n    this.pub = redis.createClient(this.opts);\n    var that = this;\n    this.sub.on('message', function(channel, message) {\n        if (channel != 'cote') return;\n        that.emit('message', message, { address: '0.0.0.0', port: port});\n    });\n    this.sub.subscribe('cote');\n    this.pub.on('ready', () => {\n        callback();\n        this.emit('listening');\n    });*/\n    callback();\n    this.emit('listening');\n};\n\nMqttHandler.prototype.setBroadcast = function() {};\n\nMqttHandler.prototype.addMembership = function() {};\n\nMqttHandler.prototype.setMulticastTTL = function() {};\n\nMqttHandler.prototype.close = function() {\n    const that = this;\n    let i;\n    for (i in that.hosts) {\n        that.hosts[i].close();\n    }\n};\n\nMqttHandler.prototype.send = function(msg, offset, length, port, address) {\n    /* console.log(\n        'Sending',\n        msg\n    );*/\n    /* todo */\n    /* this.pub.publish('cote', msg.toString());*/\n    const that = this;\n    if (that.network.key !== null) {\n        msg = msg.toString('base64');\n    } else {\n        msg = msg.toString();\n    }\n    if (that.lastSend != msg) {\n        // console.log('Sending',msg);\n        let i;\n        for (i in that.hosts) {\n            setImmediate(\n                function(message, index) {\n                    that.hosts[index].send(message);\n                },\n                msg,\n                i\n            );\n        }\n        that.lastSend = msg;\n    }\n};\n\nfunction createSocket(mqttopts, network) {\n    return new MqttHandler(mqttopts, network);\n}\n\nmodule.exports = {\n    createSocket: createSocket,\n};\n"],"file":"mqtt.js"}