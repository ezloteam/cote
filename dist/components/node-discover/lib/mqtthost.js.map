{"version":3,"sources":["../../../../src/components/node-discover/lib/mqtthost.js"],"names":["EventEmitter","require","util","mqtt","MqttHost","ip","mqttnetwork","call","mqn","announce_topic","opts","host_topic_prefix","network","hostName","sent_last","cid","createHash","update","instanceUuid","digest","substring","options","keepalive","clientId","reconnectPeriod","connectTimeout","will","topic","payload","retain","resubscribe","client","connect","host_protocol","host_port","that","on","length","tosend","sent","send","subscribe","emit","message","packet","toString","topicSuffix","substr","inherits","prototype","str","publish","close","end","ecpt","createHost","module","exports"],"mappings":"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","sourcesContent":["const EventEmitter = require('events').EventEmitter;\nconst util = require('util');\nconst mqtt = require('mqtt');\n\nfunction MqttHost(ip, mqttnetwork) {\n    EventEmitter.call(this);\n\n    this.ip = ip;\n    this.mqn = mqttnetwork;\n    this.announce_topic = this.mqn.opts.host_topic_prefix + this.mqn.network.hostName;\n\n    this.sent_last = '';\n\n    // console.log( 'Starting host connection to', this.ip );\n\n    let cid;\n    cid =\n        this.mqn.network.hostName +\n        require('crypto')\n            .createHash('md5')\n            .update(this.mqn.network.instanceUuid)\n            .digest('hex');\n    cid = cid.substring(22);\n\n    options = {\n        keepalive: 10,\n        clientId: cid,\n        reconnectPeriod: 1000,\n        connectTimeout: 30 * 1000,\n        will: {\n            topic: this.announce_topic,\n            payload: '',\n            retain: true,\n        },\n        resubscribe: true,\n    };\n    this.client = mqtt.connect(this.mqn.opts.host_protocol + '://' + this.ip + ':' + this.mqn.host_port, options);\n    const that = this;\n\n    that.client.on('connect', function() {\n        // console.log('connected @',that.ip);\n        if (that.sent_last.length > 0) {\n            const tosend = that.sent_last;\n            that.sent = '';\n            that.send(tosend);\n        }\n        that.client.subscribe(that.mqn.opts.host_topic_prefix + '#');\n        that.emit('connected', that.ip);\n    });\n    that.client.on('message', function(topic, message, packet) {\n        if (topic.toString() == this.announce_topic) {\n            return;\n        }\n        const topicSuffix = topic.toString().substr(that.mqn.opts.host_topic_prefix.length);\n        that.emit('message', topicSuffix, message.toString(), that.ip);\n    });\n    that.client.on('close', function() {\n        that.emit('mqtthostdisconnected', that.ip);\n        // console.log('disconnected close @',that.ip);\n    });\n    that.client.on('offline', function() {\n        that.emit('mqtthostdisconnected', that.ip);\n        // console.log('disconnected offline @',that.ip);\n    });\n    that.client.on('end', function() {\n        that.emit('mqtthostdisconnected', that.ip);\n        // console.log('disconnected end @',that.ip);\n    });\n}\n\nutil.inherits(MqttHost, EventEmitter);\n\nMqttHost.prototype.send = function(str) {\n    str = str.toString();\n    const that = this;\n    if (that.sent !== str) {\n        /* console.log(that.sent,' ?vs? ',str);*/\n        that.client.publish(that.announce_topic, str, { retain: true });\n        that.sent = str;\n    }\n};\n\nMqttHost.prototype.close = function() {\n    try {\n        this.client.end(true);\n    } catch (ecpt) {}\n    try {\n        this.mqn = {};\n    } catch (ecpt) {}\n};\n\nfunction createHost(ip, mqttnetwork) {\n    return new MqttHost(ip, mqttnetwork);\n}\n\nmodule.exports = {\n    createHost: createHost,\n};\n"],"file":"mqtthost.js"}